The ChatDemo Example
  BANNERSTART
  - Copyright 2006-2008, Galois, Inc.
  - This software is distributed under a standard, three-clause BSD license.
  - Please see the file LICENSE, distributed with this software, for specific
  - terms and conditions.
  Author: Adam Wick <awick@galois.com>
  BANNEREND
======================================================

Contents
--------

  1. Description
  2. Building and Running

1. Description
--------------

IMPORTANT: You must run the 'make_halvm_dir.py' script before running this
example!

The ChatDemo example implements a simplistic, multi-level chatroom on the
HALVM. At a high level, clients connect to a single server. When a client
writes a message, the server determines who to send it to and if any filtering
should be applied before sending it.

The clients are implemented as a simple application with two threads. At
start-up, the client communicates via the Xenstore to the server, in order
to identify itself and generate a shared communication channel. At that
point, one thread looks for input from the user and sends anything it receives
to the server. The other thread looks for messages from the server and prints
them to the console.

The server is more complicated. It sets a Xenstore watch in order to find new
clients. Once a client connection is formed, the server spawns a thread for
that client, which reads input from the client and passes it on to a central
messaging thread. This final thread takes these messages, determines who should
see them (and if they can see the message, if it should be filtered), and sends
the message back to the client. 

There are two variants of the program.  

The first (ChatDemo.hs) uses unidirectional IVC channels and
therefore, two chat channels (one for each direction) are created by
the client, and their names are sent to the server.  This demonstrates
the use of unidirectional IVC and how channel names can be sent in
messages.

The second (ChatDemoBi.hs) uses bidirectional IVC channels, and there
is no need for passing channel names in messages.  To build the second
one, add the argument SRC=ChatDemoBi.hs to the make commands below.

2. Building and Running
-----------------------

If you haven't already, make the /halvm Xenstore directory:

  python ${HALVM_DIR}/bin/make_halvm_dir.py

You can then build and run the server as follows:
 
  make runServer

The client is a little more tricky, since each client will need its
own unique name.  Therefore, you need to pass an extra parameter with
the name.  Thus, to start a client with the name Adam, use the
following:

  make runClient NAME=Adam
