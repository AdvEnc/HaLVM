# BANNERSTART
# - Copyright 2009, Galois, Inc.
# - This software is distributed under a standard, three-clause BSD license.
# - Please see the file LICENSE, distributed with this software, for specific
# - terms and conditions.
# Author: Andy Adams-Moran <adams-moran@galois.com>
# BANNEREND

#######################################################################
#
# Assumed to be defined in subject Makefile (or possibly environment)
#
#   HS_SRC=<vanilla Haskell source files, usually just the test harness>
#   HALVM_SRC=<HaLVM Haskell source files>
#   TEST_SUBJECTS=<Compiled HaLVM binaries>
#   TEST_VMS=<VM names as "xm" denotes them>
#   TEST_CONFIGS=<.config files for each TEST_VM; empty if not constructed>
#   VERBOSE_TEST=-v or --verbose
#   CEXE=<name of any C-dervied executable>
#
#######################################################################


#######################################################################
# Common executables
#######################################################################

# We need to get the real TOPDIR here, so we can use it to find the top-level
# common.mk in consumers of /this/ file.
#
TOPDIR		= @TOPDIR@
GREP		= @GREP@
SUDO		= @SUDO@
DIFF		= @DIFF@
XM_EXE		= @XM@
KILLALL_EXE	= @KILLALL@
XEN_BIN_ROOT	= @XEN_BIN_ROOT@
QEMU_EXE	= @QEMU@

# We want the system cabal for building the test infrastructure, not
# $(PLATFORM_CABAL), which is built for building halvm-ghc, etc., nor
# $(HALVM_CABAL) which is used for building HaLVMs.
CABAL		= @CABAL@

include $(TOPDIR)/mk/common.mk

XM=$(SUDO) $(XM_EXE)
KILL=$(SUDO) $(KILLALL_EXE) -q
RM+=-f
QEMU=$(SUDO) $(QEMU_EXE)


#######################################################################
# Common test variables
#######################################################################

# Reify some important environment variables, with reasonable defaults
# if they don't exist.  These are all related to where to store the results
# of running the test.
TESTING_TOPDIR	= $(shell echo $$TESTTOPDIR)
OUTDIR		= $(shell echo $$OUTDIR)
RESULTSFILE	= $(shell echo $$RESULTSFILE)
CHECKFILE	= $(shell echo $$CHECKFILE)
REPORTFILE	= $(shell echo $$REPORTFILE)

ifeq ($(strip $(TESTING_TOPDIR)),)
TESTING_TOPDIR	= $(TOPDIR)/static-bits/examples
endif
ifeq ($(strip $(OUTDIR)),)
OUTDIR		= test_report
endif
ifeq ($(strip $(RESULTSFILE)),)
TEST_RESULTS	= $(OUTDIR)/results
else
TEST_RESULTS	= $(OUTDIR)/$(RESULTSFILE)
endif
ifeq ($(strip $(CHECKFILE)),)
RESULTS_CHECK	= $(OUTDIR)/check
else
RESULTS_CHECK	= $(OUTDIR)/$(CHECKFILE)
endif
ifeq ($(strip $(REPORTFILE)),)
TEST_REPORT	= $(OUTDIR)/report
else
TEST_REPORT	= $(OUTDIR)/$(REPORTFILE)
endif

# This is always local to the test target
GOLDEN_RESULTS=results.ok

# SOme important executables, found relative to the TESTING_TOPDIR
MKHALFS		= $(TESTING_TOPDIR)/bin/mkhalfs
MAKEDISK	= $(TESTING_TOPDIR)/scripts/make-disk.sh

#######################################################################
# Common test targets
#######################################################################

.PHONY: test outdir

ifdef QEMU_TEST
test: tidy build outdir $(TEST_CONFIGS)
	-make --no-print-directory run
	-make --no-print-directory tidy
	$(call report_on_test,$(TEST_RESULTS),$(GOLDEN),$(RESULTS_CHECK),$(TEST_REPORT))
else
test: tidy build outdir $(TEST_CONFIGS)
	-$(XM) dmesg -c > /dev/null
	-make --no-print-directory run
	-$(XM) dmesg > $(TEST_RESULTS).dmesg
	-make --no-print-directory tidy
	$(call report_on_test,$(TEST_RESULTS),$(GOLDEN),$(RESULTS_CHECK),$(TEST_REPORT))
endif

ifdef QEMU_TEST
tidy::
	-$(KILL) $(shell basename $(QEMU_EXE))
else
tidy::
	-for VM in $(TEST_VMS); do $(XM) destroy $$VM 2> /dev/null ; done
endif

example:: $(TEST_CONFIGS) $(TEST_SUBJECTS)

build:: example

stop: tidy

clean:: tidy
	-for EXE in $(TEST_SUBJECTS); do $(RM) $$EXE; done
	-for SRC in $(HALVM_SRCS); do $(RM) `basename $$SRC .hs`.{o,hi}; done
	-$(RM) -r $(OUTDIR)

outdir:
	-$(MKDIR) -p $(OUTDIR)

bless:
	$(CP) -f $(RESULTS) $(GOLDEN)


########################################################################
# HaLVM compilation
########################################################################

HALVM_GHC_OPTS=-Wall -O2

ifdef TEST_CABAL
# For HaLVMs built using halvm-cabal
dist/setup-config: $(TEST_CABAL)
	$(HALVM_CABAL) configure

$(TEST_SUBJECTS): $(HALVM_SRCS) dist/setup-config
	$(HALVM_CABAL) build

clean::
	$(HALVM_CABAL) clean
else
# For HaLVMs built directly by halvm-ghc
%: %.hs
	$(HALVM_GHC) --make $(HALVM_GHC_OPTS) $< -o $@

endif

########################################################################
# QEMU-based tests
########################################################################

ifdef QEMU_TEST
QEMU_MEM	= 256
DISK_SIZE       = 4000000
ifeq ($(strip $(XEN_BIN_ROOT)),/)
XEN_IMG=/boot/xen.gz
else
XEN_IMG=$(XEN_BIN_ROOT)/boot/xen.gz
endif

%.img: %.grublines $(XEN_IMG) $(TEST_VMS)
	$(SUDO) $(MAKEDISK) $@ $(DISK_SIZE) $^

example:: $(DISK_IMG)

# The expectation is that each QEMU-based test's Makefile will define its
# own run target, and in fact that qemu will be called by a Harness.  qemu-run
# is the common case for reference, and can be used while the Testing library
# is enhanced.  Presumes there's only one disk image.
qemu-run: $(DISK_IMG)
	$(QEMU) $(QEMU_FLAGS) -nographic -no-kqemu -hda $(DISK_IMG)	\
			      -m $(QEMU_MEM)

clean::
	$(RM) mnt $(DISK_IMG)
endif

########################################################################
# Testing with a harness.
#
# Almost all of the tests use a test harness.
#
# If the local Makefile defines NO_HARNESS, then it must give at least
# a 'run' target.
########################################################################

ifndef NO_HARNESS
# Where to find the test harness and its .cabal file; default is the
# current working directory.

HARNESS_DIR?=.
HARNESS_SRC?=$(HARNESS_DIR)/Harness.hs
HARNESS?=$(HARNESS_DIR)/dist/build/harness/harness
HARNESS_CABAL?=$(HARNESS_DIR)/harness.cabal

clean::
	$(call run_in_dir,$(HARNESS_DIR),$(CABAL) clean)

run: build
	$(SUDO) $(HARNESS) $(VERBOSE_TEST) > $(TEST_RESULTS) 2>&1 

$(HARNESS_DIR)/dist/setup-config: $(HARNESS_CABAL)
	$(call run_in_dir,$(HARNESS_DIR),$(CABAL) configure)

$(HARNESS): $(HARNESS_SRC) $(HARNESS_CABAL) $(HARNESS_DIR)/dist/setup-config
	$(call run_in_dir,$(HARNESS_DIR),$(call cabal_build,$(CABAL)))

build:: $(HARNESS)
endif


########################################################################
# Compiling C intended to interact with VMs
########################################################################

CC=gcc
HALVM_CFLAGS=$(shell $(HALVM_CONFIG) --cflags)
HALVM_CLIBS=$(shell $(HALVM_CONFIG) --ivclib) -lxenstore -lxenctrl
CFLAGS=-g -O2 -Wall $(HALVM_CFLAGS)
CSRCDIR?=c
CSRCS?=$(wildcard $(CSRCDIR)/*.c)
COBJS=$(CSRCS:%.c=%.o)

$(COBJS): $(CSRCS)
	$(CC) -c $(CFLAGS) $< -o $@

$(CEXE): $(CSRCS) $(COBJS)
	$(CC) $(CFLAGS) -o $@ $(COBJS) $(HALVM_CLIBS)

ifneq ($(strip $(COBJS)),)
clean::
	-$(RM) $(COBJS)
endif

ifdef CEXE
example:: $(CEXE)

tidy::
	-$(KILL) $(shell basename $(CEXE))
endif


########################################################################
# Auxiliary functions
########################################################################

#
# report_on_test ( $1 : text file containing actual test results
#                  $2 : text file containing golden test results, if any
#                  $3 : text file to send raw test check result to
#                  $4 : text file to send summary test report to
#                )
#
define report_on_test
$(RM) -f "$4";								\
$(TOUCH) "$4";								\
if [ -s "$1" ] ; then							\
    if [ -e "$2" ] ; then						\
        if [ -s "$2" ] ; then						\
            $(DIFF) "$1" "$2" > "$3"; 					\
        else								\
            $(ECHO) "Failed; produced output:" > "$3";			\
            $(CAT) "$1" >> "$3";					\
        fi								\
    else								\
        $(GREP) "^Failure" "$1" > "$3" 2>&1;				\
    fi									\
else									\
    $(ECHO) "Failed; no output produced" > "$3";			\
fi;									\
if [ -s "$3" ] ; then							\
    $(ECHO) "Failed" > "$4";						\
fi
endef

#
# run_in_dir ( $1 : target directory
#              $2 : object to run
#            )
#
# If the target directory is the actually the current directory, then
# just run $2 directly.  Otherwise, cd into $1 and run $2, in a sub-shell.
#
# Currently only checks $1 against '.'; a more robust check would be to
# canonicalize both first, and then check for equality.  In practice,
# HARNESS_DIR is either '.' or 'Harness', so this suffices for now.
define run_in_dir
if [ "$1" = "." ] ; then $2; else ( cd $1 && $2 ); fi
endef

#
# cabal_build ( $1 : cabal executable
#             )
#
# To ensure we're always running the latest, always clean, configure, and
# rebuild.
#
define cabal_build
$1 clean && $1 configure && $1 build
endef

